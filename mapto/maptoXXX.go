package main

import (
	"fmt"
	"os"
	"text/template"
)

type MapTo struct {
	Name   string
	GoType string
}

func main() {
	mapTos := []MapTo{
		// native types
		{Name: "Bool", GoType: "bool"},

		{Name: "Int", GoType: "int"},
		{Name: "Int8", GoType: "int8"},
		{Name: "Int16", GoType: "int16"},
		{Name: "Int32", GoType: "int32"},
		{Name: "Int64", GoType: "int64"},

		{Name: "Uint", GoType: "uint"},
		{Name: "Uint8", GoType: "uint8"},
		{Name: "Uint16", GoType: "uint16"},
		{Name: "Uint32", GoType: "uint32"},
		{Name: "Uint64", GoType: "uint64"},

		{Name: "Float32", GoType: "float32"},
		{Name: "Float64", GoType: "float64"},

		{Name: "Complex64", GoType: "complex128"},
		{Name: "Complex128", GoType: "complex128"},

		{Name: "String", GoType: "string"},
	}

	formatters := []MapTo{
		{
			Name:   "%s",
			GoType: "%s",
		},
		{
			Name:   "S%s",
			GoType: "[]%s",
		},
		{
			Name:   "%sPtr",
			GoType: "*%s",
		},
		{
			Name:   "S%sPtr",
			GoType: "[]*%s",
		},
	}

	f, err := os.Create(fmt.Sprintf("./mapto.go"))
	if err != nil {
		panic(err)
	}
	defer func() { _ = f.Close() }()

	f.WriteString("// Code generated by maptoXXX.go DO NOT EDIT.\n")
	f.WriteString("\npackage fuego\n")
	f.WriteString("\n")

	for _, mapTo := range mapTos {
		for _, formatter := range formatters {
			mt := MapTo{
				Name:   fmt.Sprintf(formatter.Name, mapTo.Name),
				GoType: fmt.Sprintf(formatter.GoType, mapTo.GoType),
			}

			mapToTmpl, err := template.ParseFiles("./mapto/maptoXXX.go.tmpl")
			if err != nil {
				panic(err)
			}

			err = mapToTmpl.Execute(f, mt)
			if err != nil {
				panic(err)
			}
		}
	}
}
